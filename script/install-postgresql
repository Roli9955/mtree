#!/bin/bash
#
# Installs the specified version of PostgreSQL from source code.

set -e

readonly NUMBER_OF_ARGUMENTS="$#"
readonly TARGET_DIRECTORY="$1"
readonly VERSION_NUMBER="$2"

#######################################
# Prints echo command to stdout with green color and timestamp.
# Arguments:
#   Message.
#######################################
function print_info() {
  echo -e "\033[0;32m[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*\033[0m" >&1
  echo -e "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >> install-postgresql.log
}

#######################################
# Redirects stdout from echo command to stderr with red color and timestamp.
# Arguments:
#   Error message.
#######################################
function print_error() {
  echo -e "\033[0;31m[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*\033[0m" >&2
  echo -e "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: ERROR: $*" >> install-postgresql.log
}

#######################################
# Validates the command line arguments.
# Arguments:
#   The command line argument to be validated.
#######################################
function validate_arguments() {
  if [ "${NUMBER_OF_ARGUMENTS}" -ne 2 ]; then
    print_error "Invalid number of arguments (2 REQUIRED)."
    exit 1
  fi
  if [ ! -d "${TARGET_DIRECTORY}" ]; then
    print_error "Directory DOES NOT exists: ${TARGET_DIRECTORY}"
    exit 1
  fi
  local VERSION_FORMAT="[1-9]+[0-9]*\.[0-9]+(\.[0-9]+)*"
  if [[ ! "${VERSION_NUMBER}" =~ $VERSION_FORMAT ]]; then
    print_error "Version number format is invalid!"
    exit 1
  fi
  print_info "Arguments are valid!"
}

#######################################
# Tries a command without output.
# Arguments:
#   Command to try.
#######################################
function try_command_silently() {
  if [[ -n $("$*") ]]; then
    echo "$*"
  fi
}

#######################################
# Determine which package manager the system use.
# Arguments:
#   None
#######################################
function get_package_manager() {
  APT="$(try_command_silently apt)"
  DNF="$(try_command_silently dnf)"
  PACMAN="$(try_command_silently pacman)"
  PAMAC="$(try_command_silently pamac)"
  if [[ -n "${APT}" ]]; then
    echo "apt"
  elif [[ -n "${DNF}" ]]; then
    echo "dnf"
  elif [[ -n "${PACMAN}" ]]; then
    echo "pacman"
  elif [[ -n "${PAMAC}" ]]; then
    echo "pamac"
  fi
}

#######################################
# Determines the info command of the package manager.
# Arguments:
#   Package manager.
#######################################
function get_info_command() {
  if [[ "apt" == "$1" ]]; then
    echo "search"
  elif [[ "dnf" == "$1" ]]; then
    echo "info"
  elif [[ "pacman" == "$1" ]]; then
    echo "Qi"
  elif [[ "pamac" == "$1" ]]; then
    echo "info"
  fi
}

# Determine package manager and search command
PACKAGE_MANAGER="$(get_package_manager)"
print_info "Package manager found! ${PACKAGE_MANAGER}"
SEARCH_COMMAND="$(get_info_command "${PACKAGE_MANAGER}")"
print_info "Sufficient search command: ${SEARCH_COMMAND}"

#######################################
# Checks the prerequisites of the installation.
# Arguments:
#   None
#######################################
function check_prerequisites() {
  local COMMANDS=(chown cc gcc readline make md5sum tar useradd wget zlib)
  for cmd in "${COMMANDS[@]}"
  do
    "${PACKAGE_MANAGER}" install "${cmd}"
    if [[ ! $("${PACKAGE_MANAGER}" "${SEARCH_COMMAND}" "${cmd}") > /dev/null ]]; then
      print_error "Missing prerequisite: ${cmd}"
      print_error "Install it manually, then run this script again!"
      exit 1
    fi
  done;
  print_info "The system has all prerequisites installed!"
}

#######################################
# Downloads, validates and extracts the PostgreSQL source code.
# Arguments:
#   None
#######################################
function get_source_code() {
  local FILE="postgresql-${VERSION_NUMBER}.tar.gz"
  wget "https://ftp.postgresql.org/pub/source/v${VERSION_NUMBER}/${FILE}"
  wget "https://ftp.postgresql.org/pub/source/v${VERSION_NUMBER}/${FILE}.md5"
  md5sum --check "${FILE}.md5"
  tar -xvzf "${FILE}"
  rm "${FILE}"
  rm "${FILE}.md5"
  print_info "Source code is downloaded!"
}

#######################################
# Runs the PostgreSQL configuration script.
# Arguments:
#   None
#######################################
function configure_postgresql() {
  postgresql-"${VERSION_NUMBER}"/configure "--prefix=${TARGET_DIRECTORY}"
  print_info "PostgreSQL configured!"
}

#######################################
# Builds PostgreSQL from source code.
# Arguments:
#   None
#######################################
function build_postgresql() {
  #make world
  make
  print_info "PostgreSQL world is made!"
  #make check
  print_info "PostgreSQL world is checked!"
  print_info "Please enter root password."
  #su -c "make install-world"
  make install
  print_info "PostgreSQL world is installed!"
}

#######################################
# Clears the unnecessary files and directories.
# Arguments:
#   None
#######################################
function clear_files() {
  rm -rf "postgresql-${VERSION_NUMBER}/"
  rm -rf "config/"
  rm -rf "contrib/"
  rm -rf "doc/"
  rm -rf "src/"
  rm -rf "tmp_install/"
  rm -rf "config.status"
  rm -rf "config.log"
  rm -rf "GNUmakefile"
  rm -rf "Makefile"
  print_info "Unnecessary files deleted."
}

#######################################
# Add PostgreSQL to the PATH.
# Arguments:
#   None
#######################################
function add_postgresql_to_path() {
  local PATH="${TARGET_DIRECTORY}/bin":$PATH
  export PATH
  print_info "PostgreSQL is on PATH!"
}

#######################################
# Does the post-installation setup steps.
# Arguments:
#   None
#######################################
function post_installation_setup() {
  print_info "Please enter root password."
  su -c "/sbin/ldconfig ${TARGET_DIRECTORY}/lib"
  local PATH="${TARGET_DIRECTORY}/bin:$PATH"
  export PATH
  print_info "PostgreSQL post-installation magic is done!"
}

#######################################
# Create postgres user and necessary directories.
# Arguments:
#   None
#######################################
function create_user_and_data_directory() {
  #print_info "Please enter root password."
  #su -c "useradd postgres"
  #print_info "Please enter root password."
  #su -c "passwd postgres"
  #print_info "New user created: postgres!"
  #print_info "Please enter root password."
  #su -c "mkdir ${TARGET_DIRECTORY}/data"
  print_info "Please enter root password."
  su -c "chown -R postgres ${TARGET_DIRECTORY}"
}

#######################################
# Initalizes database.
# Arguments:
#   None
#######################################
function initalize_database() {
  print_info "Please enter postgres user's password."
  su -c "${TARGET_DIRECTORY}/bin/initdb -D ${TARGET_DIRECTORY}/data" postgres
  print_info "Please enter postgres user's password."
  su -c "${TARGET_DIRECTORY}/bin/pg_ctl -D ${TARGET_DIRECTORY}/data -l logfile start" postgres
  print_info "Database initalized. Installation finished."
}

validate_arguments
check_prerequisites
get_source_code
configure_postgresql
build_postgresql
clear_files
add_postgresql_to_path
post_installation_setup
create_user_and_data_directory
initalize_database
